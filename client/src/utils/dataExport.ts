/**
 * Data Export Utilities
 * Provides functions to export water tracking data in various formats
 */

export interface ExportEntry {
  date: string;
  time: string;
  amount_ml: number;
  source: string;
  note?: string;
}

export interface ExportSummary {
  total_entries: number;
  total_intake_ml: number;
  average_daily_ml: number;
  date_range: {
    start: string;
    end: string;
  };
  export_date: string;
}

/**
 * Export data as CSV format
 */
export const exportToCSV = (entries: ExportEntry[], summary: ExportSummary, filename: string = 'goutdeau-water-tracking.csv'): void => {
  // Create CSV header
  const header = ['Date', 'Time', 'Amount (ml)', 'Source', 'Note'];
  
  // Create CSV rows
  const rows = entries.map(entry => [
    entry.date,
    entry.time,
    entry.amount_ml.toString(),
    entry.source,
    entry.note || ''
  ]);
  
  // Add summary section
  const summaryRows = [
    [],
    ['SUMMARY'],
    ['Total Entries', summary.total_entries.toString()],
    ['Total Intake (ml)', summary.total_intake_ml.toString()],
    ['Average Daily Intake (ml)', summary.average_daily_ml.toFixed(0)],
    ['Date Range', `${summary.date_range.start} to ${summary.date_range.end}`],
    ['Export Date', summary.export_date]
  ];
  
  // Combine all rows
  const allRows = [header, ...rows, ...summaryRows];
  
  // Convert to CSV string
  const csvContent = allRows
    .map(row => row.map(cell => `"${cell}"`).join(','))
    .join('\n');
  
  // Create and trigger download
  downloadFile(csvContent, filename, 'text/csv');
};

/**
 * Export data as JSON format
 */
export const exportToJSON = (entries: ExportEntry[], summary: ExportSummary, filename: string = 'goutdeau-water-tracking.json'): void => {
  const exportData = {
    metadata: {
      app: 'GoutDeau',
      version: '1.0',
      export_date: summary.export_date,
      date_range: summary.date_range
    },
    summary: {
      total_entries: summary.total_entries,
      total_intake_ml: summary.total_intake_ml,
      average_daily_ml: summary.average_daily_ml
    },
    entries: entries
  };
  
  const jsonContent = JSON.stringify(exportData, null, 2);
  downloadFile(jsonContent, filename, 'application/json');
};

/**
 * Export summary report as plain text
 */
export const exportToText = (entries: ExportEntry[], summary: ExportSummary, filename: string = 'goutdeau-report.txt'): void => {
  let textContent = '═══════════════════════════════════════════════\n';
  textContent += '      GOUTDEAU WATER TRACKING REPORT\n';
  textContent += '═══════════════════════════════════════════════\n\n';
  
  textContent += 'SUMMARY\n';
  textContent += '───────────────────────────────────────────────\n';
  textContent += `Date Range:     ${summary.date_range.start} to ${summary.date_range.end}\n`;
  textContent += `Total Entries:  ${summary.total_entries}\n`;
  textContent += `Total Intake:   ${summary.total_intake_ml} ml (${(summary.total_intake_ml / 29.5735).toFixed(1)} oz)\n`;
  textContent += `Daily Average:  ${summary.average_daily_ml.toFixed(0)} ml (${(summary.average_daily_ml / 29.5735).toFixed(1)} oz)\n`;
  textContent += `Export Date:    ${summary.export_date}\n\n`;
  
  textContent += 'DETAILED ENTRIES\n';
  textContent += '───────────────────────────────────────────────\n';
  
  // Group entries by date
  const entriesByDate = entries.reduce((acc, entry) => {
    if (!acc[entry.date]) {
      acc[entry.date] = [];
    }
    acc[entry.date].push(entry);
    return acc;
  }, {} as { [date: string]: ExportEntry[] });
  
  // Output entries by date
  Object.entries(entriesByDate)
    .sort(([dateA], [dateB]) => dateB.localeCompare(dateA))
    .forEach(([date, dayEntries]) => {
      const dayTotal = dayEntries.reduce((sum, e) => sum + e.amount_ml, 0);
      textContent += `\n${date} - Total: ${dayTotal} ml\n`;
      
      dayEntries
        .sort((a, b) => b.time.localeCompare(a.time))
        .forEach(entry => {
          textContent += `  ${entry.time}  ${String(entry.amount_ml).padStart(6)} ml  [${entry.source}]`;
          if (entry.note) {
            textContent += `  - ${entry.note}`;
          }
          textContent += '\n';
        });
    });
  
  textContent += '\n═══════════════════════════════════════════════\n';
  textContent += `Generated by GoutDeau on ${summary.export_date}\n`;
  textContent += '═══════════════════════════════════════════════\n';
  
  downloadFile(textContent, filename, 'text/plain');
};

/**
 * Helper function to trigger file download
 */
const downloadFile = (content: string, filename: string, mimeType: string): void => {
  const blob = new Blob([content], { type: mimeType });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};

/**
 * Format date for export
 */
export const formatDateForExport = (date: Date): string => {
  return date.toISOString().split('T')[0];
};

/**
 * Format time for export
 */
export const formatTimeForExport = (timestamp: string): string => {
  return new Date(timestamp).toLocaleTimeString('en-US', { 
    hour: '2-digit', 
    minute: '2-digit',
    hour12: false 
  });
};

